from itertools import product

WORKLOADS = [
  # "uniform-100",  # Excluded for now
  "uniform-95",
  "uniform-50",
  "middle-95",
  "middle-50",
]

SWEEP_WORKLOADS = [
  "middle-20",
  "middle-50",
  "middle-80",
  "uniform-20",
  "uniform-50",
  "uniform-80",
]

SCAN_WORKLOADS = [
  "middlescan-20",
  "middlescan-50",
  "middlescan-80",
  "uniformscan-20",
  "uniformscan-50",
  "uniformscan-80",
]

DBS = [
  "llsm",
  "rocksdb",
  # "leanstore",  # Excluded for now
]

THREADS = [1, 2, 4, 8, 16]

RECORD_SIZES = [64]

COMMON_OPTIONS = {
  "bg_threads": 16,
  "bypass_wal": True,
  "tl_page_fill_pct": 50,
  "use_direct_io": True,
  "latency_sample_period": 10,
  "memtable_size_mib": 64,
  "cache_size_mib": 279,    # 407 MiB in total (2 x 64 MiB + 279 MiB, ~33% of the dataset)
  "reorg_length": 2,        # Aggressively reorganize
  "deferral_autotuning": True,
  "max_deferrals": 1,
}

###
### Combine & plot.
###

run_command(
  name="plot_sweep",
  run="python3 plot.py",
  deps=[":combine_sweep"],
)

run_command(
  name="combine",
  run="python3 combine_raw.py",
  deps=[":insert-synthetic-64"],
)

run_command(
  name="combine_sweep",
  run="python3 combine_raw.py",
  deps=[":sweep-synthetic-64"],
)

run_command(
  name="combine_scan",
  run="python3 combine_raw.py",
  deps=[":scan-synthetic-64"],
)

run_command(
  name="plot-middle8",
  run="python3 plot.py",
  deps=[":combine-middle8"],
)

run_command(
  name="plot-middlescan8",
  run="python3 plot.py",
  deps=[":combine-middlescan8"],
)

run_command(
  name="combine-middle8",
  run="python3 combine_raw.py",
  deps=[":middle8"],
)

run_command(
  name="combine-middlescan8",
  run="python3 combine_raw.py",
  deps=[":middlescan8"],
)

###
### Preload.
###

for db, record_size_bytes in product(DBS, RECORD_SIZES):
  run_command(
    name="preload-synthetic-{}-{}".format(record_size_bytes, db),
    run="../preload.sh --db={db} --checkpoint_name=insert-synthetic-{record_size_bytes}-{db} "
      "--workload_config=insert/workloads/setup.yml --record_size_bytes={record_size_bytes} "
      "--rdb_bloom_bits=10".format(
      db=db, 
      record_size_bytes=record_size_bytes,
    )
  )

group(
  name="preload-synthetic",
  deps=[
    ":preload-synthetic-{}-{}".format(record_size_bytes, db)
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)

###
### Run.
###

for record_size_bytes in RECORD_SIZES:
  run_experiment_group(
    name="insert-synthetic-{}".format(record_size_bytes),
    run="../run.sh",
    experiments=[
      ExperimentInstance(
        name="insert-synthetic-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": db,
          "checkpoint_name": "insert-synthetic-{}-{}".format(record_size_bytes, db),
          "workload_config": "insert/workloads/{}.yml".format(workload),
          "threads": threads,
          "record_size_bytes": record_size_bytes,
        },
      )
      for db, workload, threads in product(DBS, WORKLOADS, THREADS)
    ],
    deps=[
      ":preload-synthetic-{}-{}".format(record_size_bytes, db)
      for db in DBS
    ],
  )

  run_experiment_group(
    name="sweep-synthetic-{}".format(record_size_bytes),
    run="../run.sh",  
    experiments=[
      ExperimentInstance(
        name="sweep-synthetic-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": db,
          "checkpoint_name": "insert-synthetic-{}-{}".format(record_size_bytes, db),
          "workload_config": "insert/workloads/{}.yml".format(workload),
          "threads": threads,
          "rdb_bloom_bits": 10,
          "record_size_bytes": record_size_bytes,
        },
      )
      for db, workload, threads in product(DBS, WORKLOADS, THREADS)
    ],
    deps=[
      ":preload-synthetic-{}-{}".format(record_size_bytes, db)
      for db in DBS
    ],
  )

  run_experiment_group(
    name="scan-synthetic-{}".format(record_size_bytes),
    run="../run.sh", 
    experiments=[
      ExperimentInstance(
        name="scan-synthetic-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": db,
          "checkpoint_name": "insert-synthetic-{}-{}".format(record_size_bytes, db),
          "workload_config": "insert/workloads/{}.yml".format(workload),
          "threads": threads,
          "rdb_bloom_bits": 10,
          "record_size_bytes": record_size_bytes,
        },
      )
      for db, workload, threads in product(DBS, WORKLOADS, THREADS)
    ],
    deps=[
      ":preload-synthetic-{}-{}".format(record_size_bytes, db)
      for db in DBS
    ],
  )

group(
  name="insert-synthetic",
  deps=[
    ":insert-synthetic-{}".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
group(
  name="sweep-synthetic",
  deps=[
    ":sweep-synthetic-{}".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
group(
  name="scan-synthetic",
  deps=[
    ":scan-synthetic-{}".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)

combine(
  name="middle8",
  deps=[
    ":sweep-synthetic-64-{}-{}-8".format(db, workload)
    for workload, db in product(["middle-20", "middle-50", "middle-80"], DBS)
  ],
)

combine(
  name="middlescan8",
  deps=[
    ":scan-synthetic-64-{}-{}-8".format(db, workload)
    for workload, db in product(["middlescan-20", "middlescan-50", "middlescan-80"], DBS)
  ],
)

# Factor analysis experiment for reorganization (run during flush or in the background)
run_experiment_group(
  name="llsm-reorg",
  run="../run.sh",  
  experiments=[
    ExperimentInstance(
      name="llsm-reorg-{}-{}".format(reorg_length, record_size_bytes),
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "checkpoint_name": "insert-synthetic-{}-llsm".format(record_size_bytes),
        "workload_config": "insert/workloads/middle-50.yml",
        "threads": 8,
        "reorg_length": reorg_length,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, reorg_length in product(RECORD_SIZES, [2, 4, 6])
  ],
  deps=[
    ":preload-synthetic-{}-llsm".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
