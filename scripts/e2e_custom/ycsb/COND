from itertools import product

WORKLOADS = [
  "a", "b", "c", "d", "e", "f",
  "un_a", "un_b", "un_c", "un_d", "un_e", "un_f",
]

DBS = [
  "llsm",
  "rocksdb",
  "leanstore", 
]

THREADS = [1, 2, 4, 8, 16]

RECORD_SIZES = [64]

COMMON_OPTIONS = {
  "bg_threads": 16,
  "bypass_wal": True,
  "tl_page_fill_pct": 50,
  "use_direct_io": True,
  "latency_sample_period": 10,
  "memtable_size_mib": 64,
  "cache_size_mib": 279,    # 407 MiB in total (2 x 64 MiB + 279 MiB, ~33% of the dataset)
  "reorg_length": 2,        # Aggressively reorganize
  "deferral_autotuning": True,
  "max_deferrals": 1,
}

OSM_DATASET = "'$TP_DATASET_PATH/osm_ny.txt'"
AMZN_DATASET = "'$TP_DATASET_PATH/amazon_reviews.txt'"

# Number of bits to use for RocksDB's bloom filters
RDB_BLOOM_BITS = 10

# Runs all the YCSB experiments.
# Running time: 7 hours (including creating the checkpoints)
combine(
  name="ycsb",
  deps=[
    ":ycsb-synthetic",
    ":ycsb-osm",
    ":ycsb-amzn",
  ],
)

###
### Combine & plot.
###

combine(
  name="plot",
  deps=[
    ":plot_bar",
    ":plot_scale",
  ],
)

run_command(
  name="plot_bar",
  run="python3 plot_bar.py",
  deps=[
    ":combine",
    ":rdbb",
  ],
)

run_command(
  name="plot_scale",
  run="python3 plot_scale.py",
  deps=[
    ":combine",
    ":rdbb",
  ],
)

run_command(
  name="combine",
  run="python3 combine_raw.py",
  deps=[
    ":ycsb-amzn-64",
    ":ycsb-osm-64",
    ":ycsb-synthetic-64",
  ],
)

run_command(
  name="rdbb",
  run="python3 combine_raw.py",
  deps=[
    ":ycsb-synthetic-64rdbb",
    ":ycsb-osm-64rdbb",
    ":ycsb-amzn-64rdbb",
  ],
)

###
### Preload.
###

# Preload tasks.

for db, record_size_bytes in product(DBS, RECORD_SIZES):
  run_command(
    name="preload-synthetic-{}-{}".format(record_size_bytes, db),
    run="../preload.sh --db={db} --checkpoint_name=ycsb-synthetic-{record_size_bytes}-{db} "
      "--workload_config=ycsb/workloads/setup.yml --record_size_bytes={record_size_bytes}".format(
      db=db,
      record_size_bytes=record_size_bytes,
    )
  )

  run_command(
    name="preload-osm-{}-{}".format(record_size_bytes, db),
    run="../preload.sh --db={db} --checkpoint_name=ycsb-osm-{record_size_bytes}-{db} " 
      "--workload_config=ycsb/workloads/setup.yml --record_size_bytes={record_size_bytes} "
      "--custom_dataset={custom_dataset}".format(
      db=db,
      record_size_bytes=record_size_bytes,
      custom_dataset=OSM_DATASET,
    )
  )

  run_command(
    name="preload-amzn-{}-{}".format(record_size_bytes, db),
    run="../preload.sh --db={db} --checkpoint_name=ycsb-amzn-{record_size_bytes}-{db}" 
      "--workload_config=ycsb/workloads/setup.yml --record_size_bytes={record_size_bytes} "
      "--custom_dataset={custom_dataset}".format(
      db=db,
      record_size_bytes=record_size_bytes,
      custom_dataset=AMZN_DATASET,
    )
  )

for record_size_bytes in RECORD_SIZES:
  run_command(
    name="preload-synthetic-{}rdbb-rocksdb".format(record_size_bytes),
    run="../preload.sh --db=rocksdb --checkpoint_name=ycsb-synthetic-{record_size_bytes}rdbb-rocksdb "
      "--workload_config=ycsb/workloads/setup.yml --record_size_bytes={record_size_bytes} "
      "--rdb_bloom_bits={rdb_bloom_bits}".format(
      record_size_bytes=record_size_bytes,
      rdb_bloom_bits=RDB_BLOOM_BITS,
    )
  )

  run_command(
    name="preload-osm-{}rdbb-rocksdb".format(record_size_bytes),
    run="../preload.sh --db=rocksdb --checkpoint_name=ycsb-osm-{record_size_bytes}rdbb-rocksdb "
      "--workload_config=ycsb/workloads/setup.yml --record_size_bytes={record_size_bytes} "
      "--rdb_bloom_bits={rdb_bloom_bits} --custom_dataset={custom_dataset}".format(
      record_size_bytes=record_size_bytes,
      rdb_bloom_bits=RDB_BLOOM_BITS,
      custom_dataset=OSM_DATASET,
    )
  )

  run_command(
    name="preload-amzn-{}rdbb-rocksdb".format(record_size_bytes),
    run="../preload.sh --db=rocksdb --checkpoint_name=ycsb-amzn-{record_size_bytes}rdbb-rocksdb "
      "--workload_config=ycsb/workloads/setup.yml --record_size_bytes={record_size_bytes} "
      "--rdb_bloom_bits={rdb_bloom_bits} --custom_dataset={custom_dataset}".format(
      record_size_bytes=record_size_bytes,
      rdb_bloom_bits=RDB_BLOOM_BITS,
      custom_dataset=AMZN_DATASET,
    )
  )

# Preload task groups.

group(
  name="preload-synthetic",
  deps=[
    ":preload-synthetic-{}-{}".format(record_size_bytes, db)
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)
group(
  name="preload-osm",
  deps=[
    ":preload-osm-{}-{}".format(record_size_bytes, db)
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)
group(
  name="preload-amzn",
  deps=[
    ":preload-amzn-{}-{}".format(record_size_bytes, db)
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)

group(
  name="preload-synthetic-rdbb",
  deps=[
    ":preload-synthetic-{}rdbb-rocksdb".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)

group(
  name="preload-osm-rdbb",
  deps=[
    ":preload-osm-{}rdbb-rocksdb".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)

group(
  name="preload-amzn-rdbb",
  deps=[
    ":preload-amzn-{}rdbb-rocksdb".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)

###
### Run.
###

# Basic experiments.

for record_size_bytes in RECORD_SIZES:
  run_experiment_group(
    name="ycsb-synthetic-{}".format(record_size_bytes),
    run="../run.sh",
    experiments=[
      ExperimentInstance(
        name="ycsb-synthetic-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": db,
          "checkpoint_name": "ycsb-synthetic-{}-{}".format(record_size_bytes, db),
          "workload_config": "ycsb/workloads/{}.yml".format(workload),
          "threads": threads,
          "record_size_bytes": record_size_bytes,
        },
      )
      for db, workload, threads in product(DBS, WORKLOADS, THREADS)
    ],
    deps=[
      ":preload-synthetic-{}-{}".format(record_size_bytes, db)
      for db in DBS
    ],
  )

  run_experiment_group(
    name="ycsb-osm-{}".format(record_size_bytes),
    run="../run.sh",
    experiments=[
      ExperimentInstance(
        name="ycsb-osm-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": db,
          "checkpoint_name": "ycsb-osm-{}-{}".format(record_size_bytes, db),
          "workload_config": "ycsb/workloads/{}.yml".format(workload),
          "custom_dataset": OSM_DATASET,
          "threads": threads,
          "record_size_bytes": record_size_bytes,
        },
      )
      for db, workload, threads in product(DBS, WORKLOADS, THREADS)
    ],
    deps=[
      ":preload-osm-{}-{}".format(record_size_bytes, db)
      for db in DBS
    ],
  )

  run_experiment_group(
    name="ycsb-amzn-{}".format(record_size_bytes),
    run="../run.sh",
    experiments=[
      ExperimentInstance(
        name="ycsb-amzn-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": db,
          "checkpoint_name": "ycsb-amzn-{}-{}".format(record_size_bytes, db),
          "workload_config": "ycsb/workloads/{}.yml".format(workload),
          "custom_dataset": AMZN_DATASET,
          "threads": threads,
          "record_size_bytes": record_size_bytes,
        },
      )
      for db, workload, threads in product(DBS, WORKLOADS, THREADS)
    ],
    deps=[
      ":preload-amzn-{}-{}".format(record_size_bytes, db)
      for db in DBS
    ],
  )

# Basic experiment groups

group(
  name="ycsb-synthetic",
  deps=[
    ":ycsb-synthetic-{}".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
group(
  name="ycsb-osm",
  deps=[
    ":ycsb-osm-{}".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
group(
  name="ycsb-amzn",
  deps=[
    ":ycsb-amzn-{}".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)


# RocksDB experiments with bloom filters.

for record_size_bytes in RECORD_SIZES:
  run_experiment_group(
    name="ycsb-synthetic-{}rdbb".format(record_size_bytes),
    run="../run.sh",
    experiments=[
      ExperimentInstance(
        name="ycsb-synthetic-{}rdbb-rocksdb-{}-{}".format(record_size_bytes, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": "rocksdb",
          "checkpoint_name": "ycsb-synthetic-{}rdbb-rocksdb".format(record_size_bytes),
          "workload_config": "ycsb/workloads/{}.yml".format(workload),
          "threads": threads,
          "rdb_bloom_bits": RDB_BLOOM_BITS,
          "record_size_bytes": record_size_bytes,
        },
      )
      for workload, threads in product(WORKLOADS, THREADS)
    ],
    deps=[":preload-synthetic-{}rdbb-rocksdb".format(record_size_bytes)],
  )

  run_experiment_group(
    name="ycsb-osm-{}rdbb".format(record_size_bytes),
    run="../run.sh ycsb-osm-rdbb",
    experiments=[
      ExperimentInstance(
        name="ycsb-osm-{}-rdbb-rocksdb-{}-{}".format(record_size_bytes, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": "rocksdb",
          "checkpoint_name": "ycsb-osm-{}rdbb-rocksdb".format(record_size_bytes),
          "workload_config": "ycsb/workloads/{}.yml".format(workload),
          "custom_dataset": OSM_DATASET,
          "threads": threads,
          "rdb_bloom_bits": RDB_BLOOM_BITS,
          "record_size_bytes": record_size_bytes,
        },
      )
      for workload, threads in product(WORKLOADS, THREADS)
    ],
    deps=[":preload-osm-{}rdbb-rocksdb".format(record_size_bytes)],
  )

  run_experiment_group(
    name="ycsb-amzn-{}rdbb".format(record_size_bytes),
    run="../run.sh ycsb-amzn-rdbb",
    experiments=[
      ExperimentInstance(
        name="ycsb-amzn-{}-rdbb-rocksdb-{}-{}".format(record_size_bytes, workload, threads),
        options={
          **COMMON_OPTIONS,
          "db": "rocksdb",
          "checkpoint_name": "ycsb-amzn-{}rdbb-rocksdb".format(record_size_bytes),
          "workload_config": "ycsb/workloads/{}.yml".format(workload),
          "custom_dataset": AMZN_DATASET,
          "threads": threads,
          "rdb_bloom_bits": RDB_BLOOM_BITS,
          "record_size_bytes": record_size_bytes,
        },
      )
      for workload, threads in product(WORKLOADS, THREADS)
    ],
    deps=[":preload-amzn-{}rdbb-rocksdb".format(record_size_bytes)],
  )

# Groups for RocksDB experiments with bloom filters.
group(
  name="ycsb-synthetic-rdbb",
  deps=[
    ":ycsb-synthetic-{}rdbb".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
group(
  name="ycsb-osm-rdbb",
  deps=[
    ":ycsb-osm-{}rdbb".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)
group(
  name="ycsb-amzn-rdbb",
  deps=[
    ":ycsb-amzn-{}rdbb".format(record_size_bytes)
    for record_size_bytes in RECORD_SIZES
  ],
)

# Factor analysis experiments (Using YCSB A)
FACTOR_THREADS = 8

run_experiment_group(
  name="llsm-factor",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="llsm-factor-base",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": FACTOR_THREADS,
        "bg_threads": 2,
        "deferral_autotuning": False,
        "max_deferrals": 0,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-defer",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": FACTOR_THREADS,
        "bg_threads": 2,
        "deferral_autotuning": True,
        "max_deferrals": 1,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-parflush",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": FACTOR_THREADS,
        "bg_threads": 16,
        "deferral_autotuning": True,
        "max_deferrals": 1,
        "record_size_bytes": 64,
      },
    ),
  ],
  deps=[":preload-synthetic-64-llsm"],
)

run_experiment_group(
  name="llsm-factor-1",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="llsm-factor-base-1",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": 1,
        "bg_threads": 2,
        "deferral_autotuning": False,
        "max_deferrals": 0,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-parflush-1",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": 1,
        "bg_threads": 16,
        "deferral_autotuning": False,
        "max_deferrals": 0,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-defer-1",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": 1,
        "bg_threads": 16,
        "deferral_autotuning": True,
        "max_deferrals": 1,
        "record_size_bytes": 64,
      },
    ),
  ],
  deps=[":preload-synthetic-64-llsm"],
)
