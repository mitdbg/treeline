from itertools import product

WORKLOADS = [
  "a", "b", "c", "d", "e", "f",
  "un_a", "un_b", "un_c", "un_d", "un_e", "un_f",
]

DBS = [
  "llsm",
  "rocksdb",
  # "leanstore",  # Excluded for now
]

THREADS = [1, 2, 4, 8, 16]

RECORD_SIZES = [64]

COMMON_OPTIONS = {
  "bg_threads": 16,
  "bypass_wal": True,
  "llsm_page_fill_pct": 50,
  "use_direct_io": True,
  "latency_sample_period": 10,
  "memtable_size_mib": 64,
  "cache_size_mib": 279,    # 407 MiB in total (2 x 64 MiB + 279 MiB, ~33% of the dataset)
  "reorg_length": 2,        # Aggressively reorganize
  "use_alex": False,
  "deferral_autotuning": True,
  "max_deferrals": 1,
}

OSM_DATASET = "'$TP_DATASET_PATH/osm_ny.txt'"
AMZN_DATASET = "'$TP_DATASET_PATH/amazon_reviews.txt'"

# Number of bits to use for RocksDB's bloom filters
RDB_BLOOM_BITS = 10

# Runs all the YCSB experiments.
# Running time: 7 hours (including creating the checkpoints)
combine(
  name="ycsb",
  deps=[
    ":ycsb-synthetic",
    ":ycsb-osm",
    ":ycsb-amzn",
  ],
)

combine(
  name="plot",
  deps=[
    ":plot_bar",
    ":plot_scale",
  ],
)

run_command(
  name="plot_bar",
  run="python3 plot_bar.py",
  deps=[
    ":combine",
    ":rdbb",
  ],
)

run_command(
  name="plot_scale",
  run="python3 plot_scale.py",
  deps=[
    ":combine",
    ":rdbb",
  ],
)

run_command(
  name="combine",
  run="python3 combine_raw.py",
  deps=[
    ":ycsb",
  ],
)



run_experiment_group(
  name="preload-synthetic",
  run="../preload.sh",
  experiments=[
    ExperimentInstance(
      name="preload-ycsb-synthetic-{}-{}".format(record_size_bytes, db),
      options={
        "db": db,
        "checkpoint_name": "ycsb-synthetic-{}-{}".format(record_size_bytes, db),
        "workload_config": "ycsb/workloads/setup.yml",
        "record_size_bytes": record_size_bytes,
      }
    )
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)

run_experiment_group(
  name="preload-osm",
  run="../preload.sh",
  experiments=[
    ExperimentInstance(
      name="preload-ycsb-osm-{}-{}".format(record_size_bytes, db),
      options={
        "db": db,
        "checkpoint_name": "ycsb-osm-{}-{}".format(record_size_bytes, db),
        "workload_config": "ycsb/workloads/setup.yml",
        "custom_dataset": OSM_DATASET,
        "record_size_bytes": record_size_bytes,
      }
    )
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)

run_experiment_group(
  name="preload-amzn",
    run="../preload.sh",
  experiments=[
    ExperimentInstance(
      name="preload-ycsb-amzn-{}-{}".format(record_size_bytes, db),
      options={
        "db": db,
        "checkpoint_name": "ycsb-amzn-{}-{}".format(record_size_bytes, db),
        "workload_config": "ycsb/workloads/setup.yml",
        "custom_dataset": AMZN_DATASET,
        "record_size_bytes": record_size_bytes,
      }
    )
    for db, record_size_bytes in product(DBS, RECORD_SIZES)
  ],
)

run_experiment_group(
  name="ycsb-synthetic",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-synthetic-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
      options={
        **COMMON_OPTIONS,
        "db": db,
        "checkpoint_name": "ycsb-synthetic-{}-{}".format(record_size_bytes, db),
        "workload_config": "ycsb/workloads/{}.yml".format(workload),
        "threads": threads,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, db, workload, threads in product(RECORD_SIZES, DBS, WORKLOADS, THREADS)
  ],
  deps=[":preload-synthetic"],
)

run_experiment_group(
  name="ycsb-osm",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-osm-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
      options={
        **COMMON_OPTIONS,
        "db": db,
        "checkpoint_name": "ycsb-osm-{}-{}".format(record_size_bytes, db),
        "workload_config": "ycsb/workloads/{}.yml".format(workload),
        "custom_dataset": OSM_DATASET,
        "threads": threads,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, db, workload, threads in product(RECORD_SIZES, DBS, WORKLOADS, THREADS)
  ],
  deps=[":preload-osm"],
)

run_experiment_group(
  name="ycsb-amzn",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-amzn-{}-{}-{}-{}".format(record_size_bytes, db, workload, threads),
      options={
        **COMMON_OPTIONS,
        "db": db,
        "checkpoint_name": "ycsb-amzn-{}-{}".format(record_size_bytes, db),
        "workload_config": "ycsb/workloads/{}.yml".format(workload),
        "custom_dataset": AMZN_DATASET,
        "threads": threads,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, db, workload, threads in product(RECORD_SIZES, DBS, WORKLOADS, THREADS)
  ],
  deps=[":preload-amzn"],
)

# RocksDB experiments with bloom filters
run_command(
  name="rdbb",
  run="python3 combine_raw.py",
  deps=[
    ":ycsb-synthetic-rdbb",
    ":ycsb-osm-rdbb",
    ":ycsb-amzn-rdbb",
  ],
)

run_experiment_group(
  name="preload-synthetic-rdbb",
  run="../preload.sh",
  experiments=[
    ExperimentInstance(
      name="preload-ycsb-synthetic-{}rdbb-rocksdb".format(record_size_bytes),
      options={
        "db": "rocksdb",
        "checkpoint_name": "ycsb-synthetic-{}-rocksdb".format(record_size_bytes),
        "workload_config": "ycsb/workloads/setup.yml",
        "record_size_bytes": record_size_bytes,
        "rdb_bloom_bits": RDB_BLOOM_BITS,
      }
    )
    for record_size_bytes in RECORD_SIZES
  ],
)

run_experiment_group(
  name="preload-osm-rdbb",
  run="../preload.sh",
  experiments=[
    ExperimentInstance(
      name="preload-ycsb-osm-{}rdbb-rocksdb".format(record_size_bytes),
      options={
        "db": "rocksdb",
        "checkpoint_name": "ycsb-osm-{}-rocksdb".format(record_size_bytes),
        "workload_config": "ycsb/workloads/setup.yml",
        "custom_dataset": OSM_DATASET,
        "record_size_bytes": record_size_bytes,
        "rdb_bloom_bits": RDB_BLOOM_BITS,
      }
    )
    for record_size_bytes in RECORD_SIZES
  ],
)

run_experiment_group(
  name="preload-amzn-rdbb",
    run="../preload.sh",
  experiments=[
    ExperimentInstance(
      name="preload-ycsb-amzn-{}rdbb-rocksdb".format(record_size_bytes),
      options={
        "db": "rocksdb",
        "checkpoint_name": "ycsb-amzn-{}-rocksdb".format(record_size_bytes),
        "workload_config": "ycsb/workloads/setup.yml",
        "custom_dataset": AMZN_DATASET,
        "record_size_bytes": record_size_bytes,
        "rdb_bloom_bits": RDB_BLOOM_BITS,
      }
    )
    for record_size_bytes in RECORD_SIZES
  ],
)

run_experiment_group(
  name="ycsb-synthetic-rdbb",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-synthetic-{}rdbb-rocksdb-{}-{}".format(record_size_bytes, workload, threads),
      options={
        **COMMON_OPTIONS,
        "db": "rocksdb",
        "checkpoint_name": "ycsb-synthetic-{}-rocksdb".format(record_size_bytes),
        "workload_config": "ycsb/workloads/{}.yml".format(workload),
        "threads": threads,
        "rdb_bloom_bits": RDB_BLOOM_BITS,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, workload, threads in product(RECORD_SIZES, WORKLOADS, THREADS)
  ],
  deps=[":preload-synthetic-rdbb"],
)

run_experiment_group(
  name="ycsb-osm-rdbb",
  run="../run.sh ycsb-osm-rdbb",
  experiments=[
    ExperimentInstance(
      name="ycsb-osm-{}-rdbb-rocksdb-{}-{}".format(record_size_bytes, workload, threads),
      options={
        **COMMON_OPTIONS,
        "db": "rocksdb",
        "checkpoint_name": "ycsb-osm-{}-rocksdb".format(record_size_bytes),
        "workload_config": "ycsb/workloads/{}.yml".format(workload),
        "custom_dataset": OSM_DATASET,
        "threads": threads,
        "rdb_bloom_bits": RDB_BLOOM_BITS,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, workload, threads in product(RECORD_SIZES, WORKLOADS, THREADS)
  ],
  deps=[":preload-osm-rdbb"],
)

run_experiment_group(
  name="ycsb-amzn-rdbb",
  run="../run.sh ycsb-amzn-rdbb",
  experiments=[
    ExperimentInstance(
      name="ycsb-amzn-{}-rdbb-rocksdb-{}-{}".format(record_size_bytes, workload, threads),
      options={
        **COMMON_OPTIONS,
        "db": "rocksdb",
        "checkpoint_name": "ycsb-amzn-{}-rocksdb".format(record_size_bytes),
        "workload_config": "ycsb/workloads/{}.yml".format(workload),
        "custom_dataset": AMZN_DATASET,
        "threads": threads,
        "rdb_bloom_bits": RDB_BLOOM_BITS,
        "record_size_bytes": record_size_bytes,
      },
    )
    for record_size_bytes, workload, threads in product(RECORD_SIZES, WORKLOADS, THREADS)
  ],
  deps=[":preload-amzn-rdbb"],
)

# Factor analysis experiments
# Use YCSB A
FACTOR_THREADS = 8

run_experiment_group(
  name="llsm-factor",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="llsm-factor-base",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": FACTOR_THREADS,
        "bg_threads": 2,
        "deferral_autotuning": False,
        "max_deferrals": 0,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-defer",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": FACTOR_THREADS,
        "bg_threads": 2,
        "deferral_autotuning": True,
        "max_deferrals": 1,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-parflush",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": FACTOR_THREADS,
        "bg_threads": 16,
        "deferral_autotuning": True,
        "max_deferrals": 1,
        "record_size_bytes": 64,
      },
    ),
  ],
  deps=[":preload-synthetic"],
)

run_experiment_group(
  name="llsm-factor-1",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="llsm-factor-base-1",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": 1,
        "bg_threads": 2,
        "deferral_autotuning": False,
        "max_deferrals": 0,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-parflush-1",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": 1,
        "bg_threads": 16,
        "deferral_autotuning": False,
        "max_deferrals": 0,
        "record_size_bytes": 64,
      },
    ),
    ExperimentInstance(
      name="llsm-factor-defer-1",
      options={
        **COMMON_OPTIONS,
        "db": "llsm",
        "workload_config": "ycsb/workloads/a.yml",
        "checkpoint_name": "ycsb-synthetic-64-llsm",
        "threads": 1,
        "bg_threads": 16,
        "deferral_autotuning": True,
        "max_deferrals": 1,
        "record_size_bytes": 64,
      },
    ),
  ],
  deps=[":preload-synthetic"],
)
