from itertools import product

WORKLOADS = [
  "a", "b", "c", "d", "e", "f",
]

DBS = [
  "pg_llsm",
  "rocksdb",
]

CONFIGS = [
  {
    "name": "64B",
    "record_size_bytes": 64,

    # Used by LLSM.
    "llsm_page_fill_pct": 70,

    # Used by page-grouped LLSM.
    "records_per_page_goal": 45,
    "records_per_page_delta": 5,

    # Used by all DBs.
    # 408 MiB in total (2 x 64 MiB + 280 MiB, ~33% of the dataset)
    "memtable_mib": 64,
    "cache_mib": 280,
  },
  {
    "name": "1024B",
    "record_size_bytes": 1024,

    # Used by LLSM.
    "llsm_page_fill_pct": 50,

    # Used by page-grouped LLSM.
    "records_per_page_goal": 2,
    "records_per_page_delta": 1,

    # Used by all DBs.
    # 3255 MiB in total ~33% of the dataset
    "memtable_mib": 510,
    "cache_mib": 2235,
  },
]

COMMON_OPTIONS = {
  "threads": 1,
  "bg_threads": 8,
  "latency_sample_period": 10,

  # Affects RocksDB & LLSM
  "bypass_wal": True,
  "use_direct_io": True,

  # Affects RocksDB
  "rdb_bloom_bits": 10,

  # Affects LLSM
  "reorg_length": 2,
  "use_alex": False,
  "deferral_autotuning": True,
  "max_deferrals": 1,
}

OSM_DATASET = "'$TP_DATASET_PATH/osm_ny.txt'"
OSM_MULT = 1.160804

AMZN_DATASET = "'$TP_DATASET_PATH/amazon_reviews.txt'"
AMZN_MULT = 1.674881


###
### Utilities.
###

def process_config(db, config, mem_multiplier=1.0):
  copy = config.copy()
  del copy["cache_mib"]
  del copy["memtable_mib"]
  del copy["name"]

  if db == "pg_llsm":
    copy["cache_size_mib"] = int(mem_multiplier * (
      config["cache_mib"] + (2 * config["memtable_mib"])
    ))
  else:
    copy["cache_size_mib"] = int(mem_multiplier * config["cache_mib"])
    copy["memtable_size_mib"] = int(mem_multiplier * config["memtable_mib"])

  return copy


###
### YCSB.
###

combine(
  name="ycsb",
  deps=[
    ":ycsb-synth",
    ":ycsb-osm",
    ":ycsb-amzn",
  ],
)

combine(
  name="ycsb-64B",
  deps=[
    ":ycsb-{}-{}-64B-{}".format(*zipped)
    for zipped in product(["synth", "osm", "amzn"], DBS, WORKLOADS)
  ],
)

run_experiment_group(
  name="ycsb-synth",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-synth-{}-{}-{}".format(db, config["name"], workload),
      options={
        **COMMON_OPTIONS,
        **process_config(db, config),
        "db": db,
        "checkpoint_name": "ycsb-synth-{}-{}".format(db, config["name"]),
        "workload_config": "ycsb_v2/workloads/{}.yml".format(workload),
      },
    )
    for db, config, workload in product(DBS, CONFIGS, WORKLOADS)
  ],
  deps=[
    ":preload-synth-{}-{}".format(db, config["name"])
    for db, config in product(DBS, CONFIGS)
  ],
)

run_experiment_group(
  name="ycsb-osm",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-osm-{}-{}-{}".format(db, config["name"], workload),
      options={
        **COMMON_OPTIONS,
        **process_config(db, config, OSM_MULT),
        "db": db,
        "checkpoint_name": "ycsb-osm-{}-{}".format(db, config["name"]),
        "workload_config": "ycsb_v2/workloads/{}.yml".format(workload),
        "custom_dataset": OSM_DATASET,
      },
    )
    for db, config, workload in product(DBS, CONFIGS, WORKLOADS)
  ],
  deps=[
    ":preload-osm-{}-{}".format(db, config["name"])
    for db, config in product(DBS, CONFIGS)
  ],
)

run_experiment_group(
  name="ycsb-amzn",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="ycsb-amzn-{}-{}-{}".format(db, config["name"], workload),
      options={
        **COMMON_OPTIONS,
        **process_config(db, config, AMZN_MULT),
        "db": db,
        "checkpoint_name": "ycsb-amzn-{}-{}".format(db, config["name"]),
        "workload_config": "ycsb_v2/workloads/{}.yml".format(workload),
        "custom_dataset": OSM_DATASET,
      },
    )
    for db, config, workload in product(DBS, CONFIGS, WORKLOADS)
  ],
  deps=[
    ":preload-amzn-{}-{}".format(db, config["name"])
    for db, config in product(DBS, CONFIGS)
  ],
)

###
### Preload.
###

group(
  name="preload",
  deps=[
    ":preload-{}-{}-{}".format(*zipped)
    for zipped in product(
      ["synth", "osm", "amzn"],
      DBS,
      map(lambda c: c["name"], CONFIGS),
    )
  ],
)

for db, config in product(DBS, CONFIGS):
  run_command(
    name="preload-synth-{}-{}".format(db, config["name"]),
    run="../preload.sh",
    options={
      **COMMON_OPTIONS,
      **process_config(db, config),
      "db": db,
      "checkpoint_name": "ycsb-synth-{}-{}".format(db, config["name"]),
      "workload_config": "ycsb_v2/workloads/setup.yml",
    },
  )

  run_command(
    name="preload-osm-{}-{}".format(db, config["name"]),
    run="../preload.sh" ,
    options={
      **COMMON_OPTIONS,
      **process_config(db, config, OSM_MULT),
      "db": db,
      "checkpoint_name": "ycsb-osm-{}-{}".format(db, config["name"]),
      "workload_config": "ycsb_v2/workloads/setup.yml",
      "custom_dataset": OSM_DATASET,
    },
  )

  run_command(
    name="preload-amzn-{}-{}".format(db, config["name"]),
    run="../preload.sh",
    options={
      **COMMON_OPTIONS,
      **process_config(db, config, AMZN_MULT),
      "db": db,
      "checkpoint_name": "ycsb-amzn-{}-{}".format(db, config["name"]),
      "custom_dataset": AMZN_DATASET,
    },
  )
