from itertools import product

BUFFER_SIZE_BYTES = 64 * 1024 * 1024

CONFIGS = [
  # Represents 64 B records, 2880 bytes per page +/- (2 * 320) bytes
  {
    "records_per_page_goal": 45,
    "records_per_page_delta": 5,
    "record_size_bytes": 64,
    "write_batch_size": BUFFER_SIZE_BYTES // 64,
  },
  # Represents 1024 B records, 2048 bytes per page +/- (2 * 1024) bytes
  {
    "records_per_page_goal": 2,
    "records_per_page_delta": 1,
    "record_size_bytes": 1024,
    "write_batch_size": BUFFER_SIZE_BYTES // 1024,
  },
]

CUSTOM_DATASETS = [
  {"name": "amzn", "file": "amazon_reviews.txt", "workload": "long_scan-amzn.yml"},
  {"name": "osm", "file": "osm_ny.txt", "workload": "long_scan-osm.yml"},
]

run_experiment_group(
  name="long_scan",
  run="../run.sh",
  experiments=[
    ExperimentInstance(
      name="long_scan-uniform-{rsb}-{goal}-{delta}-{segs}".format(
        rsb=config["record_size_bytes"],
        goal=config["records_per_page_goal"],
        delta=config["records_per_page_delta"],
        segs=segs,
      ),
      options={
        **config,
        "workload_config": "workloads/20M/long_scan.yml",
        "checkpoint_name": "uniform_insert-{rsb}-{goal}-{delta}-{segs}".format(
          rsb=config["record_size_bytes"],
          goal=config["records_per_page_goal"],
          delta=config["records_per_page_delta"],
          segs=segs,
        ),
        "disable_segments": (segs == "pages"),
      },
    )
    for config, segs in product(CONFIGS, ["segs", "pages"])
  ] + [
    ExperimentInstance(
      name="long_scan-{dataset}-{rsb}-{goal}-{delta}-{segs}".format(
        dataset=dataset["name"],
        rsb=config["record_size_bytes"],
        goal=config["records_per_page_goal"],
        delta=config["records_per_page_delta"],
        segs=segs,
      ),
      options={
        **config,
        "workload_config": "workloads/20M/{}".format(dataset["workload"]),
        "custom_dataset": "'$TP_DATASET_PATH/{}'".format(dataset["file"]),
        "checkpoint_name": "{dataset}_insert-{rsb}-{goal}-{delta}-{segs}".format(
          dataset=dataset["name"],
          rsb=config["record_size_bytes"],
          goal=config["records_per_page_goal"],
          delta=config["records_per_page_delta"],
          segs=segs,
        ),
        "disable_segments": (segs == "pages"),
      },
    )
    for config, segs, dataset in product(CONFIGS, ["segs", "pages"], CUSTOM_DATASETS)
  ],
  deps=[":preload"],
)

# Checkpoint set up tasks.

group(
  name="preload",
  deps=[
    ":preload-{dataset}-{rsb}-{goal}-{delta}-{segs}".format(
      dataset=dataset,
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
      segs=segs,
    )
    for config, dataset, segs in product(
      CONFIGS,
      ["uniform", *map(lambda d: d["name"], CUSTOM_DATASETS)],
      ["segs", "pages"],
    )
  ],
)

# Uniform dataset.
for config in CONFIGS:
  common_opts = {
    **config,
    "workload_config": "workloads/20M/preload-uniform-insert.yml",
    "checkpoint_name": "uniform_insert-{rsb}-{goal}-{delta}-segs".format(
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
    ),
  }

  run_command(
    name="preload-uniform-{rsb}-{goal}-{delta}-segs".format(
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
    ),
    run="../preload_insert_scan.sh",
    options={
      **common_opts,
      "disable_segments": False,
    },
  )

  run_command(
    name="preload-uniform-{rsb}-{goal}-{delta}-pages".format(
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
    ),
    run="../preload_insert_scan.sh",
    options={
      **common_opts,
      "disable_segments": True,
    },
  )

# Custom datasets.
for config, dataset in product(CONFIGS, CUSTOM_DATASETS):
  common_opts = {
    **config,
    "workload_config": "workloads/20M/preload-{}-insert.yml".format(dataset["name"]),
    "custom_dataset": "'$TP_DATASET_PATH/{dataset_file}'".format(dataset["file"]),
    "checkpoint_name": "{dataset}_insert-{rsb}-{goal}-{delta}-segs".format(
      dataset=dataset["name"],
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
    ),
  }

  run_command(
    name="preload-{dataset}-{rsb}-{goal}-{delta}-segs".format(
      dataset=dataset["name"],
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
    ),
    run="../preload_insert_scan.sh",
    options={
      **common_opts,
      "disable_segments": False,
    },
  )

  run_command(
    name="preload-{dataset}-{rsb}-{goal}-{delta}-pages".format(
      dataset=dataset["name"],
      rsb=config["record_size_bytes"],
      goal=config["records_per_page_goal"],
      delta=config["records_per_page_delta"],
    ),
    run="../preload_insert_scan.sh",
    options={
      **common_opts,
      "disable_segments": True,
    },
  )
