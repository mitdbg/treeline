from itertools import product

DB = ["llsm", "rocksdb"]

# 0, 20, 40, ..., 100
WRITE_SPLITS = list(range(0, 110, 20))

COMMON_OPTIONS = {
  "bg_threads": 4,
  "threads": 16,
  "bypass_wal": True,
  "tl_page_fill_pct": 75,
  "use_direct_io": True,
  "latency_sample_period": 10,
  "rdb_bloom_bits": 10,
  "gen_scan_read_percent": 10,  # 10% of the reads are scans
}

PG_LLSM_OPTIONS_64 = {
  "optimistic_rec_caching": False,
  "records_per_page_goal": 44,
  "records_per_page_epsilon": 5,
}

CONFIGS = [
  {
    "gen_record_size_bytes": 64,
    "gen_num_records": 20000000,   # 20 M
    "gen_num_requests": 20000000,  # 20 M
  },
  {
    "gen_record_size_bytes": 1024,
    "gen_num_records": 10000000,   # 10 M
    "gen_num_requests": 10000000,  # 10 M
  },
]

CONFIG_64 = CONFIGS[0]

MEMORY_CONFIG = {
  64: {
    "memtable_size_mib": 64,
    "cache_size_mib": 280,         # 408 MiB in total ~33% of the dataset
  },
  1024: {
    "memtable_size_mib": 510,
    "cache_size_mib": 2235,        # 3255 MiB in total ~33% of the dataset
  },
}

DISTRIBUTIONS = ["zipfian", "uniform"]

def memory_usage(db, record_size_bytes):
  mem = MEMORY_CONFIG[record_size_bytes]
  if db == "llsm":
    # This experiment is meant to be run without LLSM's memtable (to mimic a
    # disk-based B+Tree).
    return {
      "cache_size_mib": mem["cache_size_mib"] + (2 * mem["memtable_size_mib"]),
    }
  else:
    return mem


# Run the dependent tasks separately on the correct branches. Then you can run
# this task (you will need to disable Conductor's git integration).
run_command(
  name="combine-figure",
  run="python3 combine_raw.py",
  deps=[
    ":rw_sweep_figure-master",
    ":rw_sweep_figure-version-bufferpool",
  ],
)

# All `rw_sweep` experiments with zipfian distributed requests.
# This is used for running a subset of the experiments.
combine(
  name="rw_sweep-zipfian",
  deps=[
    ":rw_sweep-{db}-{rsb}-{write_split}-zipfian".format(
      db=db,
      rsb=config["gen_record_size_bytes"],
      write_split=write_split,
    )
    for db, config, write_split in product(DB, CONFIGS, WRITE_SPLITS)
  ],
)

# All `rw_sweep` experiments with uniformly distributed requests.
# This is used for running a subset of the experiments.
combine(
  name="rw_sweep-uniform",
  deps=[
    ":rw_sweep-{db}-{rsb}-{write_split}-uniform".format(
      db=db,
      rsb=config["gen_record_size_bytes"],
      write_split=write_split,
    )
    for db, config, write_split in product(DB, CONFIGS, WRITE_SPLITS)
  ],
)

run_command(
  name="combine",
  run="python3 combine_raw.py",
  deps=[":rw_sweep"],
)

run_command(
  name="combine-zipfian",
  run="python3 combine_raw.py",
  deps=[":rw_sweep-zipfian"],
)

run_command(
  name="combine-uniform",
  run="python3 combine_raw.py",
  deps=[":rw_sweep-uniform"],
)

# All `rw_sweep` experiments that we use in our figure that must be run on
# `master`. This is used for running a subset of the experiments.
combine(
  name="rw_sweep_figure-master",
  deps=[
    ":rw_sweep-{db}-64-{write_split}-zipfian".format(
      db=db,
      write_split=write_split,
    )
    for db, write_split in product(["rocksdb", "pg_llsm"], WRITE_SPLITS)
  ],
)

# All `rw_sweep` experiments that we use in our figure that must be run on
# `version-bufferpool`. This is used for running a subset of the experiments.
combine(
  name="rw_sweep_figure-version-bufferpool",
  deps=[
    ":rw_sweep-llsm-64-{}-zipfian".format(write_split)
    for write_split in WRITE_SPLITS
  ],
)

# NOTE: This should run on `master`.
run_experiment_group(
  name="rw_sweep-rocksdb",
  run="./run.sh",
  experiments=[
    ExperimentInstance(
      name="rw_sweep-rocksdb-{rsb}-{write_split}-{dist}".format(
        rsb=config["gen_record_size_bytes"],
        write_split=write_split,
        dist=dist,
      ),
      options={
        **COMMON_OPTIONS,
        **config,
        **memory_usage("rocksdb", config["gen_record_size_bytes"]),
        "db": "rocksdb",
        "gen_update_percent": write_split,
        "gen_distribution": dist,
        "checkpoint_name": "rw_sweep-rocksdb-{rsb}".format(
          rsb=config["gen_record_size_bytes"],
        ),
      },
    )
    for config, write_split, dist in product(
      CONFIGS,
      WRITE_SPLITS,
      DISTRIBUTIONS,
    )
  ],
  deps=[
    ":preload-rocksdb-64",
    ":preload-rocksdb-1024",
  ],
)

# NOTE: This needs to run on `version-bufferpool`. This represents our
# disk-based B-tree.
run_experiment_group(
  name="rw_sweep-llsm",
  run="./run.sh",
  experiments=[
    ExperimentInstance(
      name="rw_sweep-llsm-{rsb}-{write_split}-{dist}".format(
        rsb=config["gen_record_size_bytes"],
        write_split=write_split,
        dist=dist,
      ),
      options={
        **COMMON_OPTIONS,
        **config,
        **memory_usage("llsm", config["gen_record_size_bytes"]),
        "db": "llsm",
        "gen_update_percent": write_split,
        "gen_distribution": dist,
        "checkpoint_name": "rw_sweep-llsm-{rsb}".format(
          rsb=config["gen_record_size_bytes"],
        ),
      },
    )
    for config, write_split, dist in product(
      CONFIGS,
      WRITE_SPLITS,
      DISTRIBUTIONS,
    )
  ],
  deps=[
    ":preload-llsm-64",
    ":preload-llsm-1024",
  ],
)

# NOTE: This needs to run on `master`.
run_experiment_group(
  name="rw_sweep-pg_llsm",
  run="./run.sh",
  experiments=[
    ExperimentInstance(
      name="rw_sweep-pg_llsm-64-{}-zipfian".format(write_split),
      options={
        **COMMON_OPTIONS,
        **PG_LLSM_OPTIONS_64,
        **CONFIG_64,
        **memory_usage("pg_llsm", CONFIG_64["gen_record_size_bytes"]),
        "db": "pg_llsm",
        "gen_update_percent": write_split,
        "gen_distribution": "zipfian",
        "checkpoint_name": "rw_sweep-pg_llsm-64",
      },
    )
    for write_split in WRITE_SPLITS
  ],
  deps=[":preload-pg_llsm-64"],
)

for db, config in product(DB, CONFIGS):
  run_command(
    name="preload-{db}-{rsb}".format(
      db=db,
      rsb=config["gen_record_size_bytes"],
    ),
    run="./preload.sh",
    args=["--gen_for_preload"],
    options={
      **config,
      "db": db,
      "checkpoint_name": "rw_sweep-{db}-{rsb}".format(
        db=db,
        rsb=config["gen_record_size_bytes"],
      ),
    },
  )

run_command(
  name="preload-pg_llsm-64",
  run="./preload.sh",
  args=["--gen_for_preload"],
  options={
    **PG_LLSM_OPTIONS_64,
    **CONFIG_64,
    "db": "pg_llsm",
    "checkpoint_name": "rw_sweep-pg_llsm-64",
  },
)
